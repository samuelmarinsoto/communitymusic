--------------------------- Music player
    sf::Music player;
    if (!player.openFromFile("/home/frederick/Desktop/bib/playlist1/Slipkno-the_devil_in_I.wav")){
        std::cout << "Player failed!" << std::endl;
        return -1;
    }

    std::cout << "Playing" << std::endl;
    player.play();
    while (player.getStatus() == sf::Music::Playing){

    }

    std::cout << "Song finished" << std::endl;

-------------------------- Interface
    sf::RenderWindow window(sf::VideoMode(200, 200), "SFML works!");

    sf::CircleShape shape(100.f);
    shape.setFillColor(sf::Color::Green);

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();
        window.draw(shape);
        window.display();
    }

--------------------------- Music player + linked nodes

    // ------- Create the loader
    Loader loader(string("/home/frederick/Desktop/bib/.cmp"));

    // ------ Create a list of songs
        // Filenames retrieval
    string songs_path = "/home/frederick/Desktop/bib/playlist1";
    vector< string > filenames;
    try {
        fs::directory_iterator end_iter;
        for (fs::directory_iterator iter(songs_path); iter != end_iter; ++iter) {
            if (fs::is_regular_file(*iter)) {
                std::cout << "File: " << iter->path().filename() << std::endl;
                filenames.push_back(iter->path().filename().string());
            }
            // You can add more conditions for other types of entries if needed
        }
    } catch (const std::exception& ex) {
        std::cerr << "Error: " << ex.what() << std::endl;
    }
        // List creation
    DoubleLinkedList<MP3Tags> songs;
        songs.InsertAtEnd(MP3Tags(songs_path + "/" + filenames[0]));
        songs.InsertAtEnd(MP3Tags(songs_path + "/" + filenames[1]));
        songs.InsertAtEnd(MP3Tags(songs_path + "/" + filenames[2]));
        songs.InsertAtEnd(MP3Tags(songs_path + "/" + filenames[3]));
    
    // Convert one of the songs to a wav
    loader.Convert(string(songs.GetNode(0)->data.file), string("current"));

    // Load and play the song
    sf::Music player;
    if (!player.openFromFile("/home/frederick/Desktop/bib/.cmp/current.wav")){
        std::cout << "Player failed!" << std::endl;
        return -1;
    }

    std::cout << "Playing" << std::endl;
    player.play();
    while (player.getStatus() == sf::Music::Playing){}

    std::cout << "Song finished" << std::endl;
    return 0;